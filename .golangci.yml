linters:
  enable-all: true
  disable:
    # exhaustivestruct will enforce that every field of an imported struct is
    # set. This is overkill, we can rely on implicitly set data.
    - exhaustivestruct
    - exhaustruct

    # deprecated linters
    - maligned
    - varcheck
    - structcheck
    - ifshort
    - golint
    - scopelint
    - deadcode
    - interfacer
    - rowserrcheck
    - sqlclosecheck
    - wastedassign

    # This will unreliably flag things that are not duplications.
    - dupl

    # nosnakecase will prevent a user from defining functionality with snake
    # case. This is good, in general, but some  native go functionality requires
    #  this, such as testable examples.
    - nosnakecase

    # tagliatelle enforces camel case for json tags. We can't control how web
    # APIs setup their json responses so this is not practical.
    - tagliatelle

    # testpackage requires that all tests be written in their own package. I.e.
    # if you're testing in package "a", this linter wants the tests to be
    # written in "a_test". This doesn't work for unit testing unexported data,
    # however.
    - testpackage

issues:
  exclude-rules:
    # Exclude some linters from running on tests files
    - path: _test\.go
      linters:
        # Tests are allowed to have complexity.
        - cyclop
        - gocognit
        - funlen
        - gochecknoglobals
        - goerr113
        - maintidx
        - lll
    - path: proto/*
      linters:
        - goimports
        - revive
  exclude:
    - ST1000 # Requiring package comments interferes with copyright notic
  exclude-use-default: false

linters-settings:
  varnamelen:
    ignore-names:
      - wg # wg is a standard variable name for "sync.WaitGroup"
      - i  # iterator index
      - m  # for maps
  revive:
    ignore-generated-header: true
    severity: warning
    rules:
      - name: exported
        arguments: [ "checkPrivateReceivers", "sayRepetitiveInsteadOfStutters" ]
